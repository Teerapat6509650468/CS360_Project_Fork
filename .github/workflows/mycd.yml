name: CD - Deploy to EC2 with Docker (Human trigger)

on:
  #push:
    #branches:
      #- main
  workflow_dispatch:

jobs:
  check-image-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v3    
        
      # Step 2: Check if Docker Image Exists
      - name: Check if Docker Image Exists
        id: check_image
        run: |
          REPOSITORY="${{ secrets.DOCKER_USERNAME }}/react-app"  # Replace with your DockerHub repository name
          TAG="latest"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_TOKEN }}" https://hub.docker.com/v2/repositories/${REPOSITORY}/tags/${TAG}/)
          if [ "$RESPONSE" -ne 200 ]; then
              echo "Docker image not found. Exiting workflow."
              exit 1
          fi
          echo "Docker image exists. Proceeding to deployment."

      # Step 3: Set AWS Credentials in Environment Variables
      - name: Set AWS Credentials
        if: ${{ steps.check_image.outcome == 'success' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: echo "AWS credentials set."

      # Step 4: Create EC2 Instance and Deploy the Application
      - name: Create EC2 Instance and Deploy the Application
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          APP_KEYS: ${{ secrets.APP_KEYS }}
          API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
          TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          # Define instance details
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0e2c8caa4b6378d8c \
            --instance-type t2.medium \
            --key-name ${{ secrets.AWS_KP_NAME }} \
            --security-group-ids ${{ secrets.AWS_SG_ID }} \
            --user-data file://user-data.sh \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Instance ID: $INSTANCE_ID"

          # Wait for the instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Output the instance public DNS
          INSTANCE_PUBLIC_DNS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)
          echo "Instance Public DNS: $INSTANCE_PUBLIC_DNS"

          # Get Public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Set up SSH for EC2 connection
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Wait for EC2 instance to be accessible
        run: |
          # Wait for EC2 instance to be accessible
          while ! nc -z -v -w30 ${{ secrets.EC2_PUBLIC_IP }} 22; do
            echo "Waiting for EC2 instance to be accessible..."
            sleep 30
          done

      - name: Create .env file on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # Ensure the directory is writable
            sudo touch /home/ubuntu/.env
            sudo chmod 644 /home/ubuntu/.env

            # Create the .env file with GitHub Secrets
            cat <<EOT | sudo tee /home/ubuntu/.env
            HOST=0.0.0.0
            PORT=1337
            APP_KEYS=${{ secrets.APP_KEYS }}
            API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
            ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
            TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            PUBLIC_IPV4=${{ secrets.EC2_PUBLIC_IP }}
            EOT

            echo ".env file created on EC2 instance at /home/ubuntu/.env"
          EOF

      - name: Confirm .env file on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} "cat /home/ubuntu/.env"

