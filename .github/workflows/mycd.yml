name: CD - Deploy to EC2 with Docker (Human trigger)

on:
  #push:
    #branches:
      #- main
  workflow_dispatch:

jobs:
  check-image-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v3    
        
      # Step 2: Check if Docker Image Exists
      - name: Check if React Image Exists
        id: check_react_image
        run: |
          REPOSITORY="${{ secrets.DOCKER_USERNAME }}/react-appv2"  # Replace with your DockerHub repository name
          TAG="latest"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_TOKEN }}" https://hub.docker.com/v2/repositories/${REPOSITORY}/tags/${TAG}/)
          if [ "$RESPONSE" -ne 200 ]; then
              echo "Docker image not found. Exiting workflow."
              exit 1
          fi

      - name: Check if Strapi Image Exists
        id: check_strapi_image
        run: |
          REPOSITORY="${{ secrets.DOCKER_USERNAME }}/strapi-app"  # Replace with your DockerHub repository name
          TAG="latest"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_TOKEN }}" https://hub.docker.com/v2/repositories/${REPOSITORY}/tags/${TAG}/)
          if [ "$RESPONSE" -ne 200 ]; then
              echo "Docker image not found. Exiting workflow."
              exit 1
          fi
          echo "All Docker image exists. Proceeding to deployment."

      # Step 3: Set AWS Credentials in Environment Variables
      - name: Set AWS Credentials
        if: ${{ steps.check_image.outcome == 'success' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: echo "AWS credentials set."

      # Step 4: Create EC2 Instance and Deploy the Application
      - name: Create EC2 Instance and Deploy the Application
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Define instance details
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0e2c8caa4b6378d8c \
            --instance-type t2.medium \
            --key-name ${{ secrets.AWS_KP_NAME }} \
            --security-group-ids ${{ secrets.AWS_SG_ID }} \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Instance ID: $INSTANCE_ID"

          # Wait for the instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Output the instance public DNS
          INSTANCE_PUBLIC_DNS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)
          echo "Instance Public DNS: $INSTANCE_PUBLIC_DNS"

          # Get the public IP of the new instance
            INSTANCE_PUBLIC_IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)

          echo "PUBLIC_IPV4=$INSTANCE_PUBLIC_IP" >> $GITHUB_ENV
          echo "EC2 instance is ready at $INSTANCE_PUBLIC_IP"
          sleep 10

      # Step 5: Create .env file
      - name: Create .env file
        run: |
          # Write the AWS private key secret to a file
          echo "${{ secrets.EC2_SSH_KEY }}" > HelloWorld.pem
          chmod 600 HelloWorld.pem
      
          # SSH into EC2 and run the Docker containers with environment variables
          ssh -o StrictHostKeyChecking=no -i HelloWorld.pem ubuntu@${{ env.PUBLIC_IPV4 }} <<EOF
            echo "Connected to EC2 instance"
            # Create .env file with secrets
            touch .env
            echo "APP_KEYS=${{ secrets.APP_KEYS }}" >> .env
            echo "API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}" >> .env
            echo "ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}" >> .env
            echo "TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "REACT_APP_PUBLIC_IPV4=${{ env.PUBLIC_IPV4 }}" >> .env
          EOF
          
      # Step 6: Run Docker setup script
      - name: Run Docker Setup Script
        run: |
          ssh -o StrictHostKeyChecking=no -i HelloWorld.pem ubuntu@${{ env.PUBLIC_IPV4 }} <<EOF
            # Update the package manager and install Docker
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates curl
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo "\$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            sudo systemctl enable docker.service
            sudo systemctl enable containerd.service
            sudo groupadd docker
            sudo usermod -aG docker ubuntu

            # Pull and run Docker containers
            sudo docker run -d --name react-appv2 --env-file .env -p 3000:3000 teerapat1811/react-appv2:latest
            sudo docker run -d --name strapi-app --env-file .env -p 1337:1337 teerapat1811/strapi-app:latest
          EOF

      # Step 7: Deploy IPv4 update script on EC2
      - name: Deploy IPv4 update script on EC2
        run: |
          # SSH into EC2 and deploy the update-env-ipv4.sh script
          ssh -o StrictHostKeyChecking=no -i HelloWorld.pem ubuntu@${{ env.PUBLIC_IPV4 }} <<EOF
            # Create the update-env-ipv4.sh script
            touch /home/ubuntu/update-env-ipv4.sh
            echo '#!/bin/bash' > /home/ubuntu/update-env-ipv4.sh
            echo 'TOKEN=\$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")' >> /home/ubuntu/update-env-ipv4.sh
            echo 'IPV4=\$(curl -H "X-aws-ec2-metadata-token: \$TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4)' >> /home/ubuntu/update-env-ipv4.sh
            echo 'sed -i "s/^REACT_APP_PUBLIC_IPV4=.*$/REACT_APP_PUBLIC_IPV4=\$IPV4/" /home/ubuntu/.env' >> /home/ubuntu/update-env-ipv4.sh
            echo 'cd /home/ubuntu' >> /home/ubuntu/update-env-ipv4.sh
            echo 'sudo docker stop react-appv2' >> /home/ubuntu/update-env-ipv4.sh
            echo 'sudo docker rm react-appv2' >> /home/ubuntu/update-env-ipv4.sh
            echo 'sudo docker run -d --name react-appv2 --env-file /home/ubuntu/.env -p 3000:3000 teerapat1811/react-appv2:latest' >> /home/ubuntu/update-env-ipv4.sh
            echo 'sudo docker start strapi-app' >> /home/ubuntu/update-env-ipv4.sh
      
            # Change the permission of the script to make it executable
            chmod +x /home/ubuntu/update-env-ipv4.sh
      
            # Add to cron for reboot execution
            (crontab -l 2>/dev/null; echo "@reboot /home/ubuntu/update-env-ipv4.sh") | crontab -
          EOF
